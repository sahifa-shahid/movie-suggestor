{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/green/Desktop/w/movie-suggestor/client/node_modules/expo-blur/build/BlurView.web.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport getBackgroundColor from \"./getBackgroundColor\";\n\nvar BlurView = function (_React$Component) {\n  _inherits(BlurView, _React$Component);\n\n  var _super = _createSuper(BlurView);\n\n  function BlurView() {\n    _classCallCheck(this, BlurView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BlurView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          tint = _this$props.tint,\n          intensity = _this$props.intensity,\n          _this$props$style = _this$props.style,\n          style = _this$props$style === void 0 ? {} : _this$props$style,\n          props = _objectWithoutProperties(_this$props, [\"tint\", \"intensity\", \"style\"]);\n\n      var blurStyle = getBlurStyle({\n        tint: tint,\n        intensity: intensity\n      });\n      return React.createElement(View, _extends({}, props, {\n        style: [style, blurStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 16\n        }\n      }));\n    }\n  }]);\n\n  return BlurView;\n}(React.Component);\n\nexport { BlurView as default };\nBlurView.propTypes = _objectSpread({\n  tint: PropTypes.oneOf(['light', 'default', 'dark'])\n}, ViewPropTypes);\nBlurView.defaultProps = {\n  tint: 'default',\n  intensity: 50\n};\n\nfunction isBlurSupported() {\n  return typeof CSS !== 'undefined' && (CSS.supports('-webkit-backdrop-filter', 'blur(1px)') || CSS.supports('backdrop-filter', 'blur(1px)'));\n}\n\nfunction getBlurStyle(_ref) {\n  var intensity = _ref.intensity,\n      tint = _ref.tint;\n\n  if (isBlurSupported()) {\n    var backdropFilter = \"blur(\" + intensity * 0.25 + \"px)\";\n\n    if (tint === 'dark') {\n      backdropFilter += ' brightness(50%)';\n    } else if (tint === 'light') {\n      backdropFilter += ' brightness(150%)';\n    }\n\n    return {\n      backdropFilter: backdropFilter\n    };\n  } else {\n    var backgroundColor = getBackgroundColor(intensity, tint);\n    return {\n      backgroundColor: backgroundColor\n    };\n  }\n}","map":{"version":3,"sources":["../src/BlurView.web.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;AAIA,OAAO,kBAAP;;IAEqB,Q;;;;;;;;;;;;;6BAWb;AAAA,wBAC4C,KAAK,KADjD;AAAA,UACE,IADF,eACE,IADF;AAAA,UACQ,SADR,eACQ,SADR;AAAA,0CACmB,KADnB;AAAA,UACmB,KADnB,kCAC2B,EAD3B;AAAA,UACkC,KADlC;;AAGJ,UAAM,SAAS,GAAG,YAAY,CAAC;AAAE,QAAA,IAAI,EAAJ,IAAF;AAAQ,QAAA,SAAS,EAAT;AAAR,OAAD,CAA9B;AAEA,aAAO,oBAAC,IAAD,eAAU,KAAV;AAAiB,QAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,SAAR,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAjBmC,KAAK,CAAC,S;;SAAvB,Q;AACZ,QAAA,CAAA,SAAA;AACL,EAAA,IAAI,EAAE,SAAS,CAAC,KAAV,CAAgB,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,CAAhB;AADD,GAEF,aAFE;AAKA,QAAA,CAAA,YAAA,GAAe;AACpB,EAAA,IAAI,EAAE,SADc;AAEpB,EAAA,SAAS,EAAE;AAFS,CAAf;;AAcT,SAAS,eAAT,GAAwB;AAGtB,SACE,OAAO,GAAP,KAAe,WAAf,KACC,GAAG,CAAC,QAAJ,CAAa,yBAAb,EAAwC,WAAxC,KACC,GAAG,CAAC,QAAJ,CAAa,iBAAb,EAAgC,WAAhC,CAFF,CADF;AAKD;;AAED,SAAS,YAAT,OAAyC;AAAA,MAAjB,SAAiB,QAAjB,SAAiB;AAAA,MAAN,IAAM,QAAN,IAAM;;AACvC,MAAI,eAAe,EAAnB,EAAuB;AACrB,QAAI,cAAc,aAAW,SAAS,GAAG,IAAvB,QAAlB;;AACA,QAAI,IAAI,KAAK,MAAb,EAAqB;AACnB,MAAA,cAAc,IAAI,kBAAlB;AACD,KAFD,MAEO,IAAI,IAAI,KAAK,OAAb,EAAsB;AAC3B,MAAA,cAAc,IAAI,mBAAlB;AACD;;AACD,WAAO;AACL,MAAA,cAAc,EAAd;AADK,KAAP;AAGD,GAVD,MAUO;AACL,QAAI,eAAe,GAAG,kBAAkB,CAAC,SAAD,EAAY,IAAZ,CAAxC;AACA,WAAO;AAAE,MAAA,eAAe,EAAf;AAAF,KAAP;AACD;AACF","sourcesContent":["import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { View, ViewPropTypes } from 'react-native';\n\nimport { BlurTint, Props } from './BlurView.types';\nimport getBackgroundColor from './getBackgroundColor';\n\nexport default class BlurView extends React.Component<Props> {\n  static propTypes = {\n    tint: PropTypes.oneOf(['light', 'default', 'dark']),\n    ...ViewPropTypes,\n  };\n\n  static defaultProps = {\n    tint: 'default' as BlurTint,\n    intensity: 50,\n  };\n\n  render() {\n    let { tint, intensity, style = {}, ...props } = this.props;\n\n    const blurStyle = getBlurStyle({ tint, intensity });\n\n    return <View {...props} style={[style, blurStyle]} />;\n  }\n}\n\nfunction isBlurSupported(): boolean {\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility\n  return (\n    typeof CSS !== 'undefined' &&\n    (CSS.supports('-webkit-backdrop-filter', 'blur(1px)') ||\n      CSS.supports('backdrop-filter', 'blur(1px)'))\n  );\n}\n\nfunction getBlurStyle({ intensity, tint }): { [key: string]: string } {\n  if (isBlurSupported()) {\n    let backdropFilter = `blur(${intensity * 0.25}px)`;\n    if (tint === 'dark') {\n      backdropFilter += ' brightness(50%)';\n    } else if (tint === 'light') {\n      backdropFilter += ' brightness(150%)';\n    }\n    return {\n      backdropFilter,\n    };\n  } else {\n    let backgroundColor = getBackgroundColor(intensity, tint);\n    return { backgroundColor };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}